#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <glib.h>
#include <pbc.h>
#include <pbc_random.h>

#include "bswabe.h"
#include "common.h"

char* usage =
"Usage: peks-index [OPTION ...] PUB_KEY MSK_KEY IND\n"
"\n"
"Generate an encrypted index given a clear index IND.\n"
"The clear index should be of the form:\n"
"keyword_1\n"
"keyword_2\n"
"...\n"
"It uses the public key PUB_KEY. The encrypted index will be written to the file \"encIndex\"\n"
"unless the --output-index is used.\n"
"\n"
"Mandatory arguments to long options are mandatory for short options too.\n\n"
" -h, --help                    print this message\n\n"
" -v, --version                 print version information\n\n"
" -i, --output-index FILE  	write index to FILE\n\n"
"";

char* msk_file = 0;
char* pub_file = 0;
char* ind_file = 0;
char* out_file = 0;


void
parse_args( int argc, char** argv )
{
	int i;

	for( i = 1; i < argc; i++ )
		if(      !strcmp(argv[i], "-h") || !strcmp(argv[i], "--help") )
		{
			printf("%s", usage);
			exit(0);
		}
		else if( !strcmp(argv[i], "-v") || !strcmp(argv[i], "--version") )
		{
			printf(CPABE_VERSION, "-setup");
			exit(0);
		}
		else if( !strcmp(argv[i], "-i") || !strcmp(argv[i], "--output-index") )
		{
			if( ++i >= argc )
				die(usage);
			else
				out_file = argv[i];
		}
		else if( !pub_file )
		{
			pub_file = argv[i];
		}
		else if( !msk_file )
		{
			msk_file = argv[i];
		}

		else if( !ind_file )
		{
			ind_file = argv[i];
		}

		else
			die(usage);
}

int
main( int argc, char** argv )
{
	bswabe_pub_t* pub;
	bswabe_msk_t* msk;
	peks_ind_t* ind;
	peks_trap_t* trap;

	
	parse_args(argc, argv);

	/* Retrieve public key */	
	pub = bswabe_pub_unserialize(suck_file(pub_file), 1);/* 
	msk = bswabe_msk_unserialize(pub, suck_file(msk_file), 1);

	ind = peks_enc_ind( pub, ind_file );
	trap = peks_trap( pub, msk, "test" );

	if( !peks_test_ind( pub, ind, trap ))
		printf("The encrypted index contains the word test");
*/
	return 0;
}
